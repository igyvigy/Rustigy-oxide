using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    internal class PlayerInfo
    {
        public string Id;
        public GenericPosition HomePosition;

        public PlayerInfo() { }

        public PlayerInfo(IPlayer player)
        {
            Id = player.Id;
            HomePosition = null;
        }

        public PlayerInfo(string id, GenericPosition position)
        {
            Id = id;
            HomePosition = position;
        }

        public void SetHome(GenericPosition position)
        {
            HomePosition = position;
        }
    }

    [Info("Rustigy", "igyVigy", "0.1")]
    [Description("Core Rustigy plugin")]
    public class Rustigy : RustPlugin
    {
        private DataFileSystem dataFile;
        void Init()
        {
            dataFile = new DataFileSystem($"{Interface.Oxide.DataDirectory}\\player_info");
            Puts("Rustigy initialized");
        }

        void OnPlayerConnected(BasePlayer player)
        {
            Puts("OnPlayerConnected works!" + player._name);
        }

        protected override void LoadDefaultConfig()
        {
            Puts("Creating a new configuration file");
            Config["ShowJoinMessage"] = true;
            Config["ShowLeaveMessage"] = true;
            Config["JoinMessage"] = "Welcome to this server";
            Config["LeaveMessage"] = "Goodbye";
        }

        private PlayerInfo LoadPlayerInfo(string playerId)
        {
            return dataFile.ReadObject<PlayerInfo>($"playerInfo_{playerId}");
        }

        private void SavePlayerInfo(string playerId, PlayerInfo playerInfo)
        {
            dataFile.WriteObject($"playerInfo_{playerId}", playerInfo);
        }

        private void CommandSetHome(IPlayer player, string command, string[] args)
        {
            PlayerInfo playerInfo = LoadPlayerInfo(player.Id);
            playerInfo.SetHome(player.Position());
            SavePlayerInfo(player.Id, playerInfo);
            player.Reply("Home set.");
        }

        private void CommandHome(IPlayer player, string command, string[] args)
        {
            PlayerInfo playerInfo = LoadPlayerInfo(player.Id);
            if (playerInfo.HomePosition != null)
            {
                player.Teleport(playerInfo.HomePosition);
                player.Reply("Going home.");
            } else
            {
                player.Reply("Set home position first.");
            }
        }

        private void CommandHeal(IPlayer player, string command, string[] args)
        {
            float health = player.Health;
            float maxHealth = player.MaxHealth;
            player.Heal(maxHealth - health);
        }

        private void CommandHurt(IPlayer player, string command, string[] args)
        {
            float damage = 10;
            if (args.Length > 0)
            {
                try
                {
                    damage = float.Parse(args[0]);
                }
                catch (System.FormatException e)
                {
                    
                } 
            }
            player.Hurt(damage);
        }

        object OnUserChat(IPlayer player, string message)
        {
            return null;
        }

        object OnPlayerCommand(BasePlayer player, string command, string[] args)
        {
            switch (command)
            {
                case "heal":
                    CommandHeal(player.IPlayer, command, args);
                    return true;
                case "hurt":
                    CommandHurt(player.IPlayer, command, args);
                    return true;
                case "sethome":
                    CommandSetHome(player.IPlayer, command, args);
                    return true;
                case "home":
                    CommandHome(player.IPlayer, command, args);
                    return true;
                default: return null;
            }
        }

    }
}